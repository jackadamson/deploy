--- # Install shakenfist on a series of Ubuntu machines
- hosts: localhost
  gather_facts: yes
  connection: ssh
  vars:
    release: git

  tasks:
    - include_tasks: tasks/distro-check.yml

    - name: Load default vars
      include_vars: main.yml

    - include: tasks/build-wheel.yml
        repo="shakenfist"
        package="shakenfist"
      when: release == "git"

    - include: tasks/build-wheel.yml
        repo="client-python"
        package="shakenfist_client"
      when: release == "git"

    - name: Log wheel details
      debug:
        msg:
          - "Shakenfist wheel is: {{hostvars['localhost']['shakenfist_wheel_path']}}"
          - "Shakenfist client wheel is: {{hostvars['localhost']['shakenfist_client_wheel_path']}}"

    - name: Generate a random auth secret
      set_fact:
        auth_secret: "{{ lookup('password', '/dev/null length=30 chars=ascii_letters') }}"

    - include: terraform/{{cloud}}/terraform.yml

    - name: Wait for instances to boot
      pause:
        minutes: "{{bootdelay}}"

- hosts: hypervisors
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh

  tasks:
    - include: terraform/{{cloud}}/postboot.yml

- hosts: db
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh

  tasks:
    - name: Write syslog file
      template:
        src: files/rsyslog-server-01-sf.conf
        dest: /etc/rsyslog.d/01-sf.conf
        owner: root
        group: sudo
        mode: u=r,g=r,o=

    - name: Restart syslog
      service:
        name: rsyslog
        enabled: yes
        state: restarted

- hosts: allsf
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: yes
  connection: ssh

  tasks:
    - name: Syslog server is DB server
      set_fact:
        syslog: "{{hostvars['localhost']['database_node_ip']}}"

    - name: Send syslog to the DB server, unless I am the DB server
      template:
        src: files/rsyslog-client-01-sf.conf
        dest: /etc/rsyslog.d/01-sf.conf
        owner: root
        group: sudo
        mode: u=r,g=r,o=
      when: hostvars['localhost']['database_node_ip'] != node_ip

    - name: Restart syslog
      service:
        name: rsyslog
        enabled: yes
        state: restarted
      when: hostvars['localhost']['database_node_ip'] != node_ip

    - name: Load default vars
      include_vars: main.yml

    - include: includes/debian.yml

    - name: Check that we can run KVM
      shell: kvm-ok

    - name: Determine default interface
      shell: ip route list default | head -1 | cut -f 5 -d " "
      register: node_egress_nic_complex
      when: node_egress_nic is not defined

    - name: Extract node default interface
      set_fact:
        node_egress_nic: "{{node_egress_nic_complex.stdout}}"
      when: node_egress_nic is not defined

    - name: Determine default interface MTU
      shell: ip link show {{node_egress_nic}} | grep mtu | sed -e 's/.*mtu //' -e 's/ .*//'
      register: node_mtu_complex

    - name: Extract default interface MTU
      set_fact:
        node_mtu: "{{node_mtu_complex.stdout}}"

    - name: Log node MTU
      debug:
        msg: "Node MTU is {{node_mtu}}"

    - name: Abort if default interface MTU is too low
      fail:
        msg: "Node MTU is too low."
      when: node_mtu|int < 2000 and cloud != "gcp"

    - name: Make /srv/shakenfist/
      file:
        path: /srv/shakenfist
        state: directory
        mode: "0755"

# Install etcd on all nodes, with members of etcd-master being voting nodes
- hosts: etcd
  roles:
    - role: andrewrothstein.etcd-cluster
      etcd_secure: False
      etcd_cluster_name: shakenfist
      etcd_enable_v2: False
      etcd_master_group_name: etcd_master

- hosts: allsf
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: yes
  connection: ssh
  vars:
    release: git

  tasks:
    - include: includes/python3.yml

    - name: Ensure the source directory is absent
      file:
        path: /srv/shakenfist/src/
        state: absent

    - name: Remove old wheels
      file:
        path: /srv/shakenfist/shakenfist*-py3-none-any.whl
        state: absent

    - name: Copy shakenfist
      synchronize:
        src: ../gitrepos/shakenfist/dist/{{hostvars['localhost']['shakenfist_wheel_path']}}
        dest: /srv/shakenfist/
      when: release == "git"

    - name: Copy shakenfist client
      synchronize:
        src: ../gitrepos/client-python/dist/{{hostvars['localhost']['shakenfist_client_wheel_path']}}
        dest: /srv/shakenfist/
      when: release == "git"

    - name: Uninstall shakenfist, if present
      command: pip3 uninstall -y shakenfist shakenfist-client
      ignore_errors: True

    - name: Install shakenfist
      command: pip3 install {{hostvars['localhost']['shakenfist_wheel_path']}}
      args:
        chdir: /srv/shakenfist/
      when: release == "git"

    - name: Install shakenfist client
      command: pip3 install {{hostvars['localhost']['shakenfist_client_wheel_path']}}
      args:
        chdir: /srv/shakenfist/
      when: release == "git"

    - name: Install shakenfist from pypi
      command: pip3 install shakenfist=={{release}}
      when: release != "git"

    - name: Install shakenfist client from pypi
      command: pip3 install shakenfist-client=={{release}}
      when: release != "git"

    - name: Create config directory
      file:
        path: /etc/sf
        state: directory
        mode: "0755"

    - name: Set system key from extra-vars
      set_fact:
        system_key: "{{admin_password}}"

    - name: Use Hashicorp Vault for "system" namespace key (if enabled)
      block:
        - set_fact:
            system_key: "{{lookup('hashivault', '{{vault_system_key_path}}', 'key')}}"
          when: vault_system_key_path is defined

      rescue:
        - fail:
            msg: "Ensure that you have installed ansible-modules-hashivault ie. pip install ansible-modules-hashivault"

    - name: Write sfrc file
      template:
        src: files/sfrc
        dest: /etc/sf/sfrc
        owner: root
        group: sudo
        mode: u=r,g=r,o=

    - name: Install sfrc for root user
      lineinfile:
        path: /root/.bashrc
        create: yes
        regexp: ". /etc/sf/sfrc"
        line: ". /etc/sf/sfrc"

    - name: Write a global auth file
      template:
        src: files/shakenfist.json
        dest: /etc/sf/shakenfist.json
        owner: root
        group: sudo
        mode: u=r,g=r,o=

- hosts: db
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh

  tasks:
    - name: Install prometheus
      apt:
        name: prometheus
        state: latest

    - name: Read local prometheus customizations
      set_fact:
        prom_additional: "{{lookup('file', 'terraform/{{cloud}}/prometheus.yml') }}"

    - name: Write prometheus configuration file
      copy:
        content: |
          global:
            external_labels:
              monitor: 'shakenfist'

          scrape_configs:
            #- job_name: 'node'
            #  static_configs:
            #    - targets: [
            #          {% for svr in groups.allsf %}
            #            '{{hostvars[svr]['node_ip']}}:9100',
            #          {% endfor %}
            #        ]
            - job_name: 'shakenfist'
              static_configs:
                - targets: [
                      {% for svr in groups.hypervisors %}
                        '{{hostvars[svr]['node_ip']}}:13001',
                      {% endfor %}
                    ]
              metric_relabel_configs:
                - source_labels: [__name__]
                  regex: '(python\w*|process_\w*)'
                  action: drop
            - job_name: 'etcd'
              static_configs:
                - targets: [
                      {% for svr in groups.allsf %}
                        '{{hostvars[svr]['node_ip']}}:2379',
                      {% endfor %}
                    ]
              metric_relabel_configs:
                - source_labels: [__name__]
                  regex: (?i)(etcd_mvcc_db_total_size_in_bytes|etcd_network_client_grpc_received_bytes_total|etcd_network_client_grpc_sent_bytes_total)
                  action: keep
          {{prom_additional}}
        dest: /etc/prometheus/prometheus.yml
        owner: root
        mode: u=rw,g=r,o=r

    - name: Restart prometheus
      service:
        name: prometheus
        enabled: yes
        state: restarted

    - include: includes/grafana.yml

    # - name: Remove previous grafana auth
    #   file:
    #     path: /var/lib/grafana/grafana.db
    #     state: absent

    - name: Write grafana config
      template:
        src: files/grafana/grafana.ini
        dest: /etc/grafana/grafana.ini
        owner: root
        mode: u=rw,g=r,o=r

    - name: Write grafana dashboard
      copy:
        src: files/grafana/provisioning/dashboards/shakenfist.json
        dest: /etc/grafana/provisioning/dashboards/shakenfist.json
        owner: root
        mode: u=rw,g=r,o=r

    - name: Write grafana dashboard config
      copy:
        src: files/grafana/provisioning/dashboards/dashboards.yaml
        dest: /etc/grafana/provisioning/dashboards/dashboards.yaml
        owner: root
        mode: u=rw,g=r,o=r

    - name: Write prometheus grafana configuration file
      copy:
        content: |
          apiVersion: 1

          datasources:
          - name: Prometheus
            type: prometheus
            orgId: 1
            url: http://{{node_ip}}:9090
            isDefault: true
            version: 1
            editable: false
            access: proxy
            jsonData:
              tlsSkipVerify: true
        dest: /etc/grafana/provisioning/datasources/prometheus.yml
        owner: root
        mode: u=rwx,g=r,o=r

    - name: Restart grafana
      service:
        name: grafana-server
        enabled: yes
        state: restarted

    - name: Create an admin namespace called "system" with one key configured
      shell: sf-passwd deploy "{{system_key}}"

- hosts: hypervisors
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh

  tasks:
    - name: Create storage directory
      file:
        path: /srv/shakenfist
        state: directory
        mode: "0755"

    - name: Copy libvirt template
      copy:
        src: files/libvirt.tmpl
        dest: /srv/shakenfist/libvirt.tmpl
        owner: root
        group: root
        mode: "0644"

    - name: Turn off default libvirt networking
      shell: |
        virsh net-destroy default
      ignore_errors: True

    - name: Copy dhcp config template
      copy:
        src: files/dhcp.tmpl
        dest: /srv/shakenfist/dhcp.tmpl
        owner: root
        group: root
        mode: "0644"

    - name: Copy dhcp hosts template
      copy:
        src: files/dhcphosts.tmpl
        dest: /srv/shakenfist/dhcphosts.tmpl
        owner: root
        group: root
        mode: "0644"

    - name: Determine node IP
      shell: /usr/bin/dig @resolver1.opendns.com ANY myip.opendns.com +short
      register: node_ip_complex
      when: node_ip is not defined

    - name: Extract node IP
      set_fact:
        node_ip: "{{node_ip_complex.stdout}}"
      when: node_ip is not defined

    - name: Configure KSM to be sensible on boot
      copy:
        content: |
          w /sys/kernel/mm/ksm/run - - - - 1
          w /sys/kernel/mm/ksm/pages_to_scan - - - - 1000000
          w /sys/kernel/mm/ksm/merge_across_nodes - - - - 0
        dest: /etc/tmpfiles.d/sf-ksm.conf
        owner: root
        mode: u=r,g=r,o=r

    # merge_across_nodes requires a reboot, so is skipped below
    - name: Configure KSM to be sensible now
      shell: |
        echo "1" > /sys/kernel/mm/ksm/run
        echo "100000" > /sys/kernel/mm/ksm/pages_to_scan
      ignore_errors: True

    - name: Write systemd unit
      template:
        src: files/sf.service
        dest: /lib/systemd/system
        owner: root
        group: root
        mode: u=r,g=r,o=r

    - name: Start the SF daemon
      service:
        name: sf
        enabled: yes
        state: restarted
        daemon_reload: yes

- hosts: db
  roles:
    - role: andrewrothstein.terraform
      terraform_binary_dir: /usr/local/bin/terraform_install

    - role: andrewrothstein.go

- hosts: db
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh

  tasks:
    - include: includes/ansible.yml

    - name: Clear out old terraform providers
      file:
        path: /srv/shakenfist/terraform-provider-shakenfist
        state: absent

    - name: Clone the terraform provider
      git:
        repo: https://github.com/shakenfist/terraform-provider-shakenfist
        dest: /srv/shakenfist/terraform-provider-shakenfist

    - name: Build terraform provider
      shell:
        cmd: /usr/local/go/bin/go build
        chdir: /srv/shakenfist/terraform-provider-shakenfist

    - name: Install terraform provider
      copy:
        src: /srv/shakenfist/terraform-provider-shakenfist/terraform-provider-shakenfist
        dest: /usr/local/bin/terraform_install/terraform-provider-shakenfist
        remote_src: yes
        mode: u+rx,g+rx,o+rx

    - name: Run any upgrade steps
      shell: sf-upgrade
